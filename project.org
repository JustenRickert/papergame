# -*- mode: org -*-

* TODO
- Basic menu system
  - Experience/leveling/upgrading
  - Statistics
  - Quests/Money
- Unit
  - Experience gaining
  - Leveling/advancing
  - New units? Evolving units? I think I like the idea of evolving units.
- Movement
  - I still need to add a shit load of behaviors. I'm thinking I can maybe each
    of the behaviors have longer cooldowns, then let each of them have a bunch
    of them. Then I want to come up with a simple .json format something or
    other to keep track of special unit types, having a slew of behaviors at
    their disposal.
- Saving
  - Probably, I'm going to need a lot of the other stuff as above for figuring
    out how to get the game to save itself, but I will list it regardless.

* [2017-01-13 Fri]
The source code of the game is starting to seem rather complex. I'm spending
more and more time thinking less about how I'm going to be able to do what I
want to do efficiently, and a lot of the times not having any idea at all about
what I am to do to solve a problem.

So today, I released some internal things, and improved various parts of it. The
game loop seems to be in place rather nicely, and it should be trivial to add
additional things to it. My internal work I think was mostly to solve bullet
collision. If there are going to be a lot of bullets on the canvas, then I think
that it will be necessary to come up with a better solution for calculating
collisions efficiently. The idea that I came up is based off the same concept
that a bucket sort algorithm has. I'm first going to, so to speak, align a
series of pails on the ground, and then place all of the vertexes into said
pails appropriated by the vertexes' position on the graph. The grid is broken up
by lines. Each vertex is placed according to the square of the graph that the
vertex is placed on. Then the grid is flattened into an array.

In this state, the collision can be made smart enough to run only on the
vertexes in the same or adjacent grid locations. This reduction corresponds to
something like O((n/a)^{2}), where a > 0, and O(n^{2}) is the runtime ordinarily for
the collision checking algorithm on /n/ vertexes.

* [2016-12-16 Fri]
Okay, so this is just going to be like a developer diary sort of thing so I can
remember where I picked off when I come back to this... So maybe this is kind of
like day one or something. 

Anyway, I rethought of the system for collisions and things. I'm just going to
call it clipping from now on. That seems better to me, as it allows for me to
then call interactions between enemies collisions instead. And then that will
have attack consequences and things to it.

Working forward, I need some way for the circles to move nicely/interestingly on
the board, then I'll have to do the same thing for the blue guys. When I have
both the reds and the blues, then I can start thinking about damage and stats
and junk.

Thus:
- red movements
- blue (should be mostly the same as red; so shouldn't take long.)
- interactions between red and blue, so things like mean staring, attacking,
  general aggression, etc. Maybe I could toy around with speech bubbles and
  things.

* [2016-12-20 Tue]
Blue and Red are now appearing on the screen, and they have the ability to
behave. Just as well, they collide with themselves and with each other. Movement
seems to be pretty satisfying at this point, and my CPU seems to have a lot of
difference between application CPU load and maximum CPU load.

Moving forward I'm going to have to work on attacking (and maybe healing) in
order for more interesting behavior to make sense. It wouldn't make sense, for
example, that an attackBehavior didn't actually have the capacity to deal
damage.

I also started to take a look at what all the WebGL libraries are kind of doing.
The rationale is the same as what OpenGL uses, and probably the game would be
superior operating on one of those libraries. That being said, those libraries
are more-so necessary for three dimensional graphing as all of the data types
are stored in more densely populated matrices requiring many mathematical
operations and which would require a graphics card. I'm not really looking to do
anything fancy. There's no light rays, or even shading.

* [2016-12-21 Wed]
The game is starting to move towards an obvious direction. That is, the behavior
system should now make sense from an outside perspective. Simply add the
behavior to the list of behaviors of the particular circle (ensuring that there
is in fact a condition for the behavior, as well as a consequence for the
behavior), then the circle should behave (using the =behave= function).

There still is yet to be implemented the actual damaging of the circles, but I
already have added the =Life= Class, so it should be fairly straight-forward how
exactly that will be implemented. I also fixed some bugs that weren't actually
showing themselves in the game; and I'm honestly not really sure how it wasn't
fucking everything up.
* [2017-01-09 Mon]
I have created the graph file now that I'm using to do all of the motions on the
screen. I figure that it will be beneficial to have appropriate graphing
algorithms, and the graph aspect makes that more of a practical reality. The
problem now, however, is that I am not really sure what kinds of additional
algorithms I have available to make. Like for example, I know how to create an
algorithm on a graph as I have it---that means being able to perform low-cost
sorts, or some kind of "clusterizing" on them---, however I don't see quite yet
the exact reason why I would be implementing something like this that could have
nice performance. Thus, I'm just going to continue as I am, and see if the game
ruins my progress at all in a way with this specific problem in mind.

This graph idea also happens to give immutable state which I think will be very
beneficial. That way at each frame I can compute what the change is going to be
instead of what the value will be, and I won't have to worry if changing that
value will have an important effect on anything else that I am using.

I have also a somewhat improved collision system. Distances are now able to be
calculated with each radius of the circles negated, so distance can be a
negative value. I like this, because it gives a pretty easy way that collision
can used to determine linear pushing forces, instead of constant pushing forces
to deal with the objects when collision is occurring.

I think that I want for the game to be more based on ranged attacks and things,
but regardless I need a way to be able to make a game out of this. So now I'm
going to develop a way to create party members/things that can level up, and
enemies that can be defeated.

Also, to note, right now a lot of things are deprecated. All of the reds/blues
classes, as well as anything crazy written in main (which I think will actually
be nothing).

With previous versions of the game, there existed a technical limitation. One of
the circle colors in the previous iterations of the game always rendered before
the other color, giving that color an inherent advantage over the other color,
particularly evident of the fact that it did not have an immutable state.
Probably, when the two forces would be unequal, this different wouldn't even
matter, however, that also included drawing, so one color was always going to be
visible over the top of the other color. With this iteration, it is that this is
NOT the case, which is pretty cool I think! Though to fix this issue, I should
also implement how. The plan is thus that I will have to implement a priority
queue or something to determine a things worthiness of being drawn towards the
front of the screen. In any case, I would be able to implement that in O(n)
run-time and O(n) memory which is acceptable, but I'm not sure exactly how I
would use it just yet, so I'll just keep moving forward and see if I'll need it
in the future.

There also does seem to still be some undesirable behavior when (I think) a
circle is trying to move in a specific direction to behave in the wander
behavior. It happens to move really far forward before deciding to turn around,
leaving it far from the group that it should be next to. I'm not sure if this is
entirely bad behavior, to be honest. Keeping funny kinks in the game, makes the
game more difficult to be perfect, which makes it more unpredictable, and more
rewarding when interesting things happen.
